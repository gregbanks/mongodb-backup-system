#!/usr/bin/env python

__author__ = 'abdul'

import sys
import traceback
import os
import signal

from functools import partial


from dargparse import dargparse
from mbs.mbs import get_mbs
from mbs.engine import STATUS_STOPPED, STATUS_STOPPING, STATUS_RUNNING
from mbs.utils import (
    wait_for, document_pretty_string, resolve_path, SignalWatcher
)
from mbs import mbs_config
from mbs.mbs_logging import setup_logging, redirect_std_to_logger

from mbs.persistence import get_backup, get_backup_plan, get_restore

###############################################################################
# MAIN
###############################################################################
def main(args):
    parser = dargparse.build_parser(PARSER_DEF)

    if len(args) < 1:
        parser.print_help()
        return

    # Parse the arguments and call the function of the selected cmd
    parsed_args = parser.parse_args(args)

    mbs_config.MBS_CONF_DIR = resolve_path(parsed_args.config_root)

    setup_logging(not getattr(parsed_args, "fork", False))

    # get the function to call from the parser framework
    command_function = parsed_args.func

    return command_function(parsed_args)

###############################################################################
# Engine Commands
###############################################################################
def start_engine(parsed_args):
    engine_id = parsed_args.engineId
    engine = _get_engine(engine_id)

    handlers = {signal.SIGINT:  partial(engine.stop, force=False),
                signal.SIGTERM: partial(engine.stop, force=True)}
    with SignalWatcher(handlers) as watcher:
        status = engine.get_status()
        if status["status"] == STATUS_RUNNING:
            print "Engine already started"
            return
        elif status["status"] == STATUS_STOPPING:
            print ("Engine is stopping now. Please wait until it is "
                   "completely stopped then try starting again")
            return

        _do_start_engine(engine, fork=parsed_args.fork)

        wait_for(partial(_engine_started, engine), timeout=5)

        if _engine_started(engine):
            print "Engine started successfully!"
        else:
            print "Engine did not start. Please check logs"
            return

        wait_for(lambda: watcher.signaled or not engine.is_alive(),
                 log_func=lambda: True)


###############################################################################
def _do_start_engine(engine, fork=False):
    if fork:
        child_pid = os.fork()
        if child_pid:
            # parent process. return
            print "Forked engine process %s" % child_pid
            return
        else:
            # need to disown yourself, Son
            os.setsid()
            os.umask(0)
            # redirect std out/err to logger
            redirect_std_to_logger()


    # forked child process
    engine.start()

###############################################################################
def _engine_started(engine):
    return engine.get_status()["status"] == STATUS_RUNNING

###############################################################################
def stop_engine(parsed_args):
    engine_id = parsed_args.engineId
    engine = _get_engine(engine_id)
    status = engine.get_status()
    if status["status"] == STATUS_STOPPING:
        print "A stop request has already been made"
        return
    elif status["status"] == STATUS_STOPPED:
        print "Engine is not running"
        return

    _do_stop_engine(engine, parsed_args.force)

###############################################################################
def _engine_stopped(engine):
    return engine.get_status()["status"] == STATUS_STOPPED

###############################################################################
def _do_stop_engine(engine, force=False):
    print "stopping engine"
    engine.stop(force=force)
    print "Waiting for engine to stop"
    wait_for(partial(_engine_stopped, engine), timeout=100)
    print "Done waiting for engine to stop"
    if _engine_stopped(engine):
        exit(0)
    else:
        print "Unable to stop engine within 100 seconds"
        exit(1)

###############################################################################
def restart_engine(parsed_args):
    engine_id = parsed_args.engineId
    engine = _get_engine(engine_id)

    # stop the engine and wait for it is completely stopped
    engine.stop()

    wait_for(partial(_engine_stopped, engine), timeout=100)

    if _engine_stopped(engine):
        start_engine(parsed_args)
    else:
        print "Engine did not stop yet. Please try later"
        exit(1)

###############################################################################
def status_engine(parsed_args):
    engine_id = parsed_args.engineId
    engine = _get_engine(engine_id)
    print document_pretty_string(engine.get_status())

###############################################################################
# Backup System Commands
###############################################################################
def start_backup_system(parsed_args):
    backup_system = _get_backup_system()

    handlers = {signal.SIGINT:  partial(backup_system.stop, force=False),
                signal.SIGTERM: partial(backup_system.stop, force=True)}
    with SignalWatcher(handlers) as watcher:
        status = backup_system.get_status()
        if status["status"] == STATUS_RUNNING:
            print "Backup System already started"
            return
        elif status["status"] == STATUS_STOPPING:
            print ("Backup System is stopping now. Please wait until it is "
                   "completely stopped then try starting again")
            return

        _do_start_backup_system(fork=parsed_args.fork)

        def backup_system_started():
            return backup_system.get_status()["status"] == STATUS_RUNNING
        wait_for(backup_system_started, timeout=5)

        if backup_system_started():
            print "Backup System started successfully!"
        else:
            print "Backup System did not start. Please check logs"

        wait_for(lambda: watcher.signaled or not backup_system.is_alive(),
                 log_func=lambda: True)

###############################################################################
def _do_start_backup_system(fork=False):
    if fork:
        child_pid = os.fork()
        if child_pid:
            # parent process. return
            print "Forked backup system process %s" % child_pid
            return
        else:
            # need to disown yourself, Son
            os.setsid()
            os.umask(0)
            # redirect std out/err to logger
            redirect_std_to_logger()

    # forked child process
    _get_backup_system().start()

###############################################################################
def stop_backup_system(parsed_args):
    backup_system = _get_backup_system()

    status = backup_system.get_status()
    if status["status"] == STATUS_STOPPING:
        print "A stop request has already been made"
        return
    elif status["status"] == STATUS_STOPPED:
        print "Backup System is not running"
        return

    backup_system.stop(force=parsed_args.force)

###############################################################################
def restart_backup_system(parsed_args):
    backup_system = _get_backup_system()

    # stop the backup_system and wait for it is completely stopped
    backup_system.stop()
    def backup_system_stopped():
        return backup_system.get_status()["status"] == STATUS_STOPPED

    wait_for(backup_system_stopped, timeout=100)

    if backup_system_stopped():
        start_backup_system(parsed_args)
    else:
        print "Backup System did not stop yet. Please try later"
        exit(1)

###############################################################################
def status_backup_system(parsed_args):
    print document_pretty_string(_get_backup_system().get_status())

###############################################################################
def run_plan_generators(parsed_args):
    _get_backup_system()._run_plan_generators()


###############################################################################
# Other Commands
###############################################################################
def generate_audit_reports(parsed_args):
    global_auditor = _get_backup_system().global_auditor
    global_auditor.generate_yesterday_audit_reports()

###############################################################################
def download_backup(parsed_args):
    backup = _get_backup(parsed_args.backupId)

    if backup.target_reference:
        if not backup.target_reference.expired:
            backup.target.get_file(backup.target_reference, os.getcwd())
        else:
            print ("Failed to download. Backup '%s' is expired." %
                   backup.id)
            exit(1)
    else:
        print ("Failed to download. Backup '%s' never uploaded."
               % backup.id)
        exit(1)

###############################################################################
def download_backup_log(parsed_args):
    backup = _get_backup(parsed_args.backupId)
    if backup.log_target_reference:
        if not backup.log_target_reference.expired:
            backup.target.get_file(backup.log_target_reference, os.getcwd())
        else:
            print ("Failed to download. Log for '%s' is expired." %
                   backup.id)
            exit(1)

    else:
        print ("Failed to download. Log for '%s' never uploaded."
               % backup.id)
        exit(1)

###############################################################################
def delete_backup(parsed_args):
    backup_system = _get_backup_system()
    backup_system.delete_backup(parsed_args.backupId)

###############################################################################
def reschedule_backup(parsed_args):
    from_scratch = parsed_args.fromScratch
    backup = _get_backup(parsed_args.backupId)
    _get_backup_system().reschedule_backup(backup, from_scratch=
                                                     from_scratch)

###############################################################################
def reschedule_all_backups(parsed_args):
    from_scratch = parsed_args.fromScratch
    get_mbs().backup_system.reschedule_all_failed_backups(from_scratch=
                                                           from_scratch)

###############################################################################
def schedule_plan_backup(parsed_args):
    backup_system = _get_backup_system()
    plan = _get_plan(parsed_args.planId)
    backup_system.schedule_new_backup(plan, one_time=True)

###############################################################################
def restore_backup(parsed_args):
    backup_system = _get_backup_system()
    destination_uri = parsed_args.destinationUri
    backup_id = parsed_args.backupId

    backup_system.schedule_backup_restore(backup_id, destination_uri)

###############################################################################
def download_restore_log(parsed_args):
    restore = _get_restore(parsed_args.restoreId)
    if restore.log_target_reference:
        if not restore.log_target_reference.expired:
            restore.source_backup.target.get_file(restore.log_target_reference,
                                                  os.getcwd())
        else:
            print ("Failed to download. Log for '%s' is expired." %
                   restore.id)
            exit(1)

    else:
        print ("Failed to download. Log for '%s' never uploaded."
               % restore.id)
        exit(1)
###############################################################################
# Helpers
###############################################################################
def _get_engine(engine_id=None):

    if not engine_id:
        return get_mbs().get_default_engine()
    else:
        return get_mbs().get_engine(engine_id)

###############################################################################
def _get_backup_system():
    backup_system = get_mbs().backup_system
    if not backup_system:
        print "No backup system configured"
        exit(1)

    return backup_system

###############################################################################
def _get_backup(backup_id):
        backup = get_backup(backup_id)
        if backup:
            return backup
        else:
            print "No such backup '%s'" % backup_id
            exit(1)

###############################################################################
def _get_restore(restore_id):
    restore = get_restore(restore_id)
    if restore:
        return restore
    else:
        print "No such restore '%s'" % restore_id
        exit(1)

###############################################################################
def _get_plan(plan_id):
    plan = get_backup_plan(plan_id)
    if plan:
        return plan
    else:
        print "No such plan '%s'" % plan_id
        exit(1)

###############################################################################
# command parser
###############################################################################
PARSER_DEF = {
    "prog": "mbs",
    "usage": "Usage: mbs [<options>] <command> [<command-args>]",
    "description" : "contains commands for the mongodb-backup-system",
    "args": [
            {
            "name": "config_root",
            "type": "optional",
            "cmd_arg": "--config-root",
            "displayName": "CONFIGROOT",
            "help": "path to mbs config root; defaults to %(default)s",
            "default": mbs_config.MBS_CONF_DIR
        }
    ],
    "children":[
        #### start-engine ####
            {
            "prog": "start-engine",
            "shortDescription" : "starts a backup engine",
            "description" : "starts a backup engine",
            "function": start_engine,
            "args": [
                    {
                    "name": "engineId",
                    "type" : "positional",
                    "nargs": "?",
                    "displayName": "ENGINE_ID",
                    "help": "An engine id"
                },
                    {
                    "name": "fork",
                    "type" : "optional",
                    "cmd_arg":  "--fork",
                    "nargs": 0,
                    "help": "fork the engine process",
                    "action": "store_true",
                    "default": False
                }
            ]
        },

        #### stop-engine ####
            {
            "prog": "stop-engine",
            "shortDescription" : "stops a backup engine",
            "description" : "stops a backup engine",
            "function": stop_engine,
            "args": [
                    {
                    "name": "engineId",
                    "type" : "positional",
                    "nargs": "?",
                    "displayName": "ENGINE_ID",
                    "help": "An engine id"
                } ,
                    {
                    "name": "force",
                    "type" : "optional",
                    "cmd_arg":  ["--force", "-f"],
                    "nargs": 0,
                    "help": "force stop engine",
                    "action": "store_true",
                    "default": False
                }
            ]
        },
        #### status-engine ####
            {
            "prog": "status-engine",
            "shortDescription" : "gets the status of a backup engine",
            "description" : "gets the status of a backup engine",
            "function": status_engine,
            "args": [
                    {
                    "name": "engineId",
                    "type" : "positional",
                    "nargs": "?",
                    "displayName": "ENGINE_ID",
                    "help": "An engine id"
                }
            ]
        },

        #### restart-engine ####
            {
            "prog": "restart-engine",
            "shortDescription" : "restarts the backup engine",
            "description" : "restarts the backup engine",
            "function": restart_engine,
            "args": [
                    {
                    "name": "engineId",
                    "type" : "positional",
                    "nargs": "?",
                    "displayName": "ENGINE_ID",
                    "help": "An engine id"
                },
                    {
                    "name": "fork",
                    "type" : "optional",
                    "cmd_arg":  "--fork",
                    "nargs": 0,
                    "help": "fork the engine process",
                    "action": "store_true",
                    "default": False
                }
            ]
        },
            {
            "prog": "start-backup-system",
            "shortDescription" : "starts the backup system",
            "description" : "starts the backup system",
            "function": start_backup_system,
            "args": [
                    {
                    "name": "fork",
                    "type" : "optional",
                    "cmd_arg":  "--fork",
                    "nargs": 0,
                    "help": "fork the engine process",
                    "action": "store_true",
                    "default": False
                }
            ]
        },

        #### stop-backup-system ####
            {
            "prog": "stop-backup-system",
            "shortDescription" : "stops the backup system",
            "description" : "stops the backup system",
            "function": stop_backup_system,
            "args": [
                    {
                    "name": "force",
                    "type" : "optional",
                    "cmd_arg":  ["--force", "-f"],
                    "nargs": 0,
                    "help": "force stop backup_system",
                    "action": "store_true",
                    "default": False
                }
            ]
        },
        #### status-backup-system ####
            {
            "prog": "status-backup-system",
            "shortDescription" : "gets the status of the backup system",
            "description" : "gets the status of the backup system",
            "function": status_backup_system
        },

        #### restart-backup-system ####
            {
            "prog": "restart-backup-system",
            "shortDescription" : "restart backup system",
            "description" : "restart backup system",
            "function": restart_backup_system,
            "args": [
                    {
                    "name": "fork",
                    "type" : "optional",
                    "cmd_arg":  "--fork",
                    "nargs": 0,
                    "help": "fork the engine process",
                    "action": "store_true",
                    "default": False
                }
            ]
        },
        #### run-plan-generators ####
            {
            "prog": "run-plan-generators",
            "shortDescription" : "Runs plans generators",
            "description" : "Runs plans generators",
            "function": run_plan_generators
        },
            {
            "prog": "generate-audit-reports",
            "shortDescription" : "generates audit reports as of yesterday",
            "description" : "generates audit reports as of yesterday",
            "function": generate_audit_reports
        },

            {
            "prog": "download-backup",
            "shortDescription" : "Downloads backup file from target to "
                                 "current working directory",
            "description" : "Downloads backup file from target to "
                            "current working directory",
            "args": [
                {
                "name": "backupId",
                "type" : "positional",
                "nargs": 1,
                "displayName": "BACKUP_ID",
                "help": "Backup id"
            }],
            "function": download_backup
        },

            {
            "prog": "download-backup-log",
            "shortDescription" : "Downloads log file for specified backup "
                                 "to current working directory",
            "description" : "Downloads log file for specified backup "
                            "to current working directory",
            "args": [
                    {
                    "name": "backupId",
                    "type" : "positional",
                    "nargs": 1,
                    "displayName": "BACKUP_ID",
                    "help": "Backup id"
                }],
            "function": download_backup_log
        },

            {
            "prog": "delete-backup",
            "shortDescription" : "Deletes specified backup",
            "description" : "Deletes specified backup",
            "args": [
                    {
                    "name": "backupId",
                    "type" : "positional",
                    "nargs": 1,
                    "displayName": "BACKUP_ID",
                    "help": "Backup id"
                }],
            "function": delete_backup
        },

            {
            "prog": "restore-backup",
            "shortDescription" : "Schedules a restore for the specified"
                                 " backup into specified destination uri",

            "description" : "Schedules a restore for the specified"
                            " backup into specified destination uri",
            "args": [
                    {
                    "name": "backupId",
                    "type" : "positional",
                    "nargs": 1,
                    "displayName": "BACKUP_ID",
                    "help": "Backup id"
                },
                    {
                    "name": "destinationUri",
                    "type" : "positional",
                    "nargs": 1,
                    "displayName": "DESTINATION_URI",
                    "help": "Destination URI"
                }
            ],
            "function": restore_backup
        },

            {
            "prog": "download-restore-log",
            "shortDescription" : "Downloads log file for specified restore "
                                 "to current working directory",
            "description" : "Downloads log file for specified restore "
                            "to current working directory",
            "args": [
                    {
                    "name": "restoreId",
                    "type" : "positional",
                    "nargs": 1,
                    "displayName": "RESTORE_ID",
                    "help": "Restore id"
                }],
            "function": download_restore_log
        },


        {
            "prog": "reschedule-backup",
            "shortDescription" : "Reschedules specified backup",
            "description" : "Reschedules specified backup. "
                            "Only applicable to failed backups",
            "args": [
                    {
                    "name": "backupId",
                    "type" : "positional",
                    "nargs": 1,
                    "displayName": "BACKUP_ID",
                    "help": "Backup id"
                },
                    {
                    "name": "fromScratch",
                    "type" : "optional",
                    "cmd_arg":  ["--from-scratch"],
                    "nargs": 0,
                    "help": "clears backup log",
                    "action": "store_true",
                    "default": False
                }

            ],
            "function": reschedule_backup
        },

            {
            "prog": "reschedule-all-backups",
            "shortDescription" : "Reschedules all failed backups",
            "description" : "Reschedules all failed backups",
            "args": [
                    {
                    "name": "fromScratch",
                    "type" : "optional",
                    "cmd_arg":  ["--from-scratch"],
                    "nargs": 0,
                    "help": "clears backup log",
                    "action": "store_true",
                    "default": False
                }

            ],
            "function": reschedule_all_backups,
        },

            {
            "prog": "schedule-plan-backup",
            "shortDescription" : "Schedules a one-time backup for the "
                                 "specified plan",
            "description" : "Schedules a one-time backup for the "
                            "specified plan",
            "args": [
                    {
                    "name": "planId",
                    "type" : "positional",
                    "nargs": 1,
                    "displayName": "PLAN_ID",
                    "help": "Plan id"
                }],
            "function": schedule_plan_backup
        }
    ]
}

###############################################################################
########################                   ####################################
########################     BOOTSTRAP     ####################################
########################                   ####################################
###############################################################################


if __name__ == '__main__':
    try:

        main(sys.argv[1:])
    except (SystemExit, KeyboardInterrupt) , e:
        if hasattr(e, 'code') and e.code == 0:
            pass
        else:
            raise
    except:
        traceback.print_exc()
